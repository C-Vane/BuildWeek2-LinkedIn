[{"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\NavBar.jsx":"1","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\App.js":"2","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\FeedMiddle.jsx":"3","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\PhotoModal.jsx":"4","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\ArticleModal.jsx":"5","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\AddModal.jsx":"6","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\EventsModal.jsx":"7","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\Posts.jsx":"8","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\StartPost.jsx":"9","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\PostComments.jsx":"10"},{"size":10200,"mtime":1606902896532,"results":"11","hashOfConfig":"12"},{"size":1743,"mtime":1606904857087,"results":"13","hashOfConfig":"12"},{"size":4265,"mtime":1606930119602,"results":"14","hashOfConfig":"12"},{"size":2991,"mtime":1606917339223,"results":"15","hashOfConfig":"12"},{"size":3007,"mtime":1606912170625,"results":"16","hashOfConfig":"12"},{"size":5519,"mtime":1606912289328,"results":"17","hashOfConfig":"12"},{"size":6839,"mtime":1606932949909,"results":"18","hashOfConfig":"12"},{"size":3638,"mtime":1606932228706,"results":"19","hashOfConfig":"12"},{"size":120,"mtime":1606926971016,"results":"20","hashOfConfig":"12"},{"size":1807,"mtime":1606932837968,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1w815c7",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\NavBar.jsx",["43"],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\App.js",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\FeedMiddle.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\PhotoModal.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\ArticleModal.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\AddModal.jsx",["44","45"],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\EventsModal.jsx",["46"],"import React from \"react\";\r\nimport { Button, Col, Form, Modal, Row, Image } from \"react-bootstrap\";\r\n\r\nclass EventsModal extends React.Component {\r\n    state = {\r\n        show: false,\r\n        background: null,\r\n        image: null,\r\n        eventPost: {\r\n            backgroundImage: [],\r\n            mainImage: [],\r\n            role: \"\",\r\n            company: \"\",\r\n            area: \"\",\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            description: \"\",\r\n        },\r\n    };\r\n\r\n    handelChange = (e) => {\r\n        let eventPost = { ...this.state.eventPost };\r\n        let currentId = e.currentTarget.id;\r\n        eventPost[currentId] = e.currentTarget.value;\r\n        this.setState({ eventPost });\r\n    };\r\n    handelSave = () => {\r\n        this.props.sendPosts(this.state.eventPost, this.props.EventName);\r\n    };\r\n    componentDidMount = () => {\r\n        this.setState({ show: this.props.show });\r\n    };\r\n    componentDidUpdate = (prevProps) => {\r\n        this.props.show !== prevProps.show && this.setState({ show: this.props.show });\r\n    };\r\n    handelImage = (e) => {\r\n        let id = e.currentTarget.id;\r\n        let prevState = { ...this.state }\r\n        prevState.eventPost[id + \"Image\"] = e.target.files[0]\r\n        prevState[id] = URL.createObjectURL(e.target.files[0]);\r\n        this.setState(prevState);\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.show} id=\"postEvent\" onHide={() => this.props.onHide(this.props.title)}>\r\n                <Modal.Header closeButton onClick={() => this.props.onHide(this.props.title)}>\r\n                    <Modal.Title>Create event</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div>\r\n                        <label className=\"upload\">Upload\r\n                            <input\r\n                                className=\"position-relative\"\r\n                                id=\"background\"\r\n                                name=\"input\"\r\n                                onChange={this.handelImage}\r\n                                type=\"file\"\r\n                                accept=\"image/x-png,image/gif,image/jpeg\"\r\n                            />\r\n                        </label>\r\n\r\n                        <Row >\r\n                            {this.state.background !== null ? <Image src={this.state.background} fluid /> : <Image src=\"https://place-hold.it/400x200?text=\" fluid />}\r\n                        </Row>\r\n                    </div>\r\n                    <div className=\"small-image ml-4\" style={{ height: \"100px\", width: \"100px\" }} >\r\n                        <label className=\"upload\">Upload\r\n                            <input\r\n                                className=\"position-relative\"\r\n                                id=\"image\"\r\n                                name=\"input\"\r\n                                onChange={this.handelImage}\r\n                                type=\"file\"\r\n                                accept=\"image/x-png,image/gif,image/jpeg\"\r\n                            />\r\n                        </label>\r\n\r\n                        <Row style={{ height: \"100px\", width: \"100px\" }} >\r\n                            {this.state.image !== null ? <Image src={this.state.image} fluid thumbnail /> : <Image src=\"https://place-hold.it/100x100?text=\" fluid rounded thumbnail />}\r\n                        </Row>\r\n\r\n                    </div>\r\n                    <Form>\r\n                        <Form.Group>\r\n                            <Form.Label>Event Name*</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                value={this.state.eventPost.name}\r\n                                onChange={this.handelChange}\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Location</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"area\"\r\n                                placeholder=\"Ex: London, United Kingdom\"\r\n                                value={this.state.eventPost.area}\r\n                                onChange={this.handelChange}\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Check type=\"checkbox\" label=\"I am currently working in this role\" />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Start Date*</Form.Label>\r\n                            <Form.Control\r\n                                type=\"date\"\r\n                                id=\"startDate\"\r\n                                value={this.state.eventPost.startDate}\r\n                                onChange={this.handelChange}\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>End Date*</Form.Label>\r\n                            <Form.Control\r\n                                type=\"date\"\r\n                                id=\"endDate\"\r\n                                value={this.state.eventPost.endDate}\r\n                                onChange={this.handelChange}\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Check type=\"checkbox\" label=\"Public event\" />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Check type=\"checkbox\" label=\"Private event\" />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control\r\n                                as=\"textarea\"\r\n                                rows={3}\r\n                                id=\"description\"\r\n                                value={this.state.eventPost.description}\r\n                                onChange={this.handelChange}\r\n                                required\r\n                            />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" className=\"rounded-pill\" onClick={this.handelSave}>\r\n                        Save\r\n                        </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventsModal;\r\n","C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\Posts.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\StartPost.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\Build-Week-LinkedIn-Clone\\linkedin-clone\\src\\components\\PostComments.jsx",["47","48"],{"ruleId":"49","severity":1,"message":"50","line":120,"column":41,"nodeType":"51","messageId":"52","endLine":120,"endColumn":42},{"ruleId":"53","severity":1,"message":"54","line":64,"column":13,"nodeType":"55","endLine":64,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":141,"column":13,"nodeType":"55","endLine":141,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":2,"column":18,"nodeType":"58","messageId":"59","endLine":2,"endColumn":21},{"ruleId":"56","severity":1,"message":"60","line":23,"column":17,"nodeType":"58","messageId":"59","endLine":23,"endColumn":21},{"ruleId":"56","severity":1,"message":"61","line":23,"column":23,"nodeType":"58","messageId":"59","endLine":23,"endColumn":29},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'postId' is assigned a value but never used."]